// app/[locale]/layout.tsx
import type { Metadata } from 'next'
import { routing, type Locale } from '@/i18n/routing'
import { NextIntlClientProvider } from 'next-intl'
import { notFound } from 'next/navigation'
import { getMessages } from 'next-intl/server'
import { Geist, Geist_Mono } from 'next/font/google'
import '../globals.css'

const geistSans = Geist({ variable: '--font-geist-sans', subsets: ['latin'] })
const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
})

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

// Type guard para estrechar de string -> Locale
function isLocale(input: string): input is Locale {
  return (routing.locales as readonly string[]).includes(input)
}

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode
  // En Next 15, params es Promise
  params: Promise<{ locale: string }>
}>) {
  const { locale: rawLocale } = await params

  if (!isLocale(rawLocale)) {
    notFound()
  }
  // A partir de aqu√≠, TS sabe que es "en" | "es"
  const locale: Locale = rawLocale

  const messages = await getMessages({ locale })

  return (
    <html lang={locale}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NextIntlClientProvider locale={locale} messages={messages}>
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  )
}
